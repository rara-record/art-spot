datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATION_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  emailVerified      Boolean  @default(false)
  role               UserRole @default(USER)
  name               String?
  avatarUrl          String?
  createdAt          DateTime @default(now())
  hashedPassword     String?
  onboardingComplete Boolean  @default(false)

  // OAuth 관련
  oauthAccounts      UserOauthAccount[]
  sessions           UserSession[]
  verificationtokens UserVerificationToken[]
  oneTimePasswords   UserOneTimePassword[]

  likes  Like[]
  visits Visit[]

  @@index([email])
}

model UserOauthAccount {
  id             String @id @default(cuid())
  providerId     String
  providerUserId String
  userId         String

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([providerId, providerUserId])
}

model UserSession {
  id             String   @id
  userId         String
  expiresAt      DateTime
  impersonatorId String?

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model UserVerificationToken {
  id      String   @id @default(cuid())
  userId  String
  expires DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

enum UserOneTimePasswordType {
  SIGNUP
  LOGIN
  PASSWORD_RESET
}

model UserOneTimePassword {
  id         String                  @id @default(cuid())
  userId     String
  code       String
  type       UserOneTimePasswordType
  identifier String
  expires    DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum ExhibitionStatus {
  UPCOMING
  ONGOING
  ENDED
}

model Exhibition {
  id           String           @id @default(cuid())
  title        String
  thumbnailUrl String?
  startDate    DateTime
  endDate      DateTime
  viewCount    Int              @default(0)
  field        String
  status       ExhibitionStatus @default(UPCOMING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Location 관계 (N:1)
  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  // ExhibitionDetail 관계 (1:1)
  detail ExhibitionDetail?

  // 사용자 상호작용 관계 (1:N)
  likes  Like[]
  visits Visit[]

  // 전시-작가 관계 (N:N)
  artists ExhibitionArtist[]

  // 전시-작품 관계 (1:N)
  artworks Artwork[]

  @@index([status])
  @@index([startDate, endDate])
  @@index([locationId])
  @@map("exhibitions")
}

model ExhibitionDetail {
  id         String   @id @default(cuid())
  title      String // 제목
  imgUrl     String? // 이미지 URL
  placeUrl   String? // 공연장 URL
  phone      String? // 문의처 전화번호
  price      String? // 티켓 요금
  closedDays String? // 휴관일
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Exhibition과의 1:1 관계
  exhibitionId String     @unique
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id])
}

model Location {
  id        String   @id @default(cuid())
  name      String // 공연장 이름
  address   String // 공연장 주소
  sido      String // 시도
  gugun     String // 구군
  latitude  String // 위도
  longitude String // 경도
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Exhibition과의 1:N 관계
  exhibitions Exhibition[] // 전시회 위치와 전시정보의 관계

  @@index([latitude, longitude])
  @@index([sido, gugun]) // 지역 검색을 위한 인덱스 추가
}

model Like {
  id           String   @id @default(cuid())
  userId       String
  exhibitionId String
  createdAt    DateTime @default(now())

  user       User       @relation(references: [id], fields: [userId], onDelete: Cascade)
  exhibition Exhibition @relation(references: [id], fields: [exhibitionId], onDelete: Cascade)

  @@unique([userId, exhibitionId])
  @@index([userId])
  @@index([exhibitionId])
}

model Visit {
  id           String   @id @default(cuid())
  userId       String
  exhibitionId String
  createdAt    DateTime @default(now())

  user       User       @relation(references: [id], fields: [userId], onDelete: Cascade)
  exhibition Exhibition @relation(references: [id], fields: [exhibitionId], onDelete: Cascade)

  @@unique([userId, exhibitionId])
  @@index([userId])
  @@index([exhibitionId])
}

// 작품
model Artwork {
  id           String          @id @default(cuid())
  exhibitionId String?
  title        String
  description  String?         @db.Text
  originalUrl  String?
  imageUrl     String?
  createdYear  String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  // 작품-작가 관계 (N:m)
  artists      ArtworkArtist[] // 공동 작품 가능
  // 작품-태그 관계 (N:N)
  tags         ArtworkTag[]

  // 작품-전시 관계 (N:1)
  exhibition Exhibition? @relation(fields: [exhibitionId], references: [id])

  @@index([exhibitionId])
  @@map("artworks")
}

// 작가
model Artist {
  id          String          @id @default(cuid())
  name        String
  imgUrl      String?
  birthYear   Int?            @db.SmallInt
  deathYear   Int?            @db.SmallInt
  nationality String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  // 작가-작품 관계 (1:N)
  artworks    ArtworkArtist[]

  // 전시-작가 관계 (N:N)
  exhibitions ExhibitionArtist[]

  @@map("artists")
}

// 전시-작가 다대다
model ExhibitionArtist {
  exhibitionId String
  artistId     String
  createdAt    DateTime @default(now())

  exhibition Exhibition @relation(fields: [exhibitionId], references: [id])
  artist     Artist     @relation(fields: [artistId], references: [id])

  @@id([exhibitionId, artistId])
  @@map("exhibition_artists")
}

// 작품-작가 다대다
model ArtworkArtist {
  artworkId String
  artistId  String
  role      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artwork Artwork @relation(fields: [artworkId], references: [id])
  artist  Artist  @relation(fields: [artistId], references: [id])

  @@id([artworkId, artistId])
  @@map("artwork_artists")
}

// 카테고리
model Category {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]

  @@map("categories")
}

// 태그
model Tag {
  id         String       @id @default(cuid())
  name       String
  code       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  artworks   ArtworkTag[]
  categoryId String
  category   Category     @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@map("tags")
}

// 작품-태그 다대다
model ArtworkTag {
  artworkId String
  tagId     String

  artwork   Artwork  @relation(fields: [artworkId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())

  @@id([artworkId, tagId])
  @@map("artwork_tags")
}
